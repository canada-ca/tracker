steps:
  # Passing POSTGRES_USER here creates a database of the same name
  - name: 'gcr.io/cloud-builders/docker'
    id: start_postgres
    entrypoint: /bin/sh
    args:
      [
        "-c",
        "docker run -d --network=cloudbuild -p=5432:5432 -e POSTGRES_USER=$_DB_NAME -e POSTGRES_PASSWORD=$_DB_PASS --name=postgres postgres:alpine",
      ]

  - name: mikewilliamson/wait-for
    id: wait
    args: ['postgres:5432']

  - name: 'gcr.io/track-compliance/ci'
    id: install
    dir: api
    entrypoint: pipenv
    args: ['sync', '-d', '--bare']
    env:
      - PIPENV_NOSPIN=TRUE

  - name: 'gcr.io/track-compliance/ci'
    id: dbInit
    dir: api
    entrypoint: pipenv
    args: ['run', 'db-upgrade']
    env:
      - DB_HOST=$_DB_HOST
      - DB_NAME=$_DB_NAME
      - DB_PASS=$_DB_PASS
      - DB_PORT=$_DB_PORT
      - DB_USER=$_DB_NAME

  - name: 'gcr.io/track-compliance/ci'
    id: test
    dir: api
    entrypoint: pipenv
    args: ['run', 'test']
    env:
      - DB_HOST=$_DB_HOST
      - DB_NAME=$_DB_NAME
      - DB_PASS=$_DB_PASS
      - DB_PORT=$_DB_PORT
      - DB_USER=$_DB_NAME
      - BASE32_SECRET=$_BASE32_SECRET
      - SUPER_SECRET_KEY=$_SUPER_SECRET_KEY
      - SUPER_SECRET_SALT=$_SUPER_SECRET_SALT
      - NOTIFICATION_API_KEY=$_NOTIFICATION_API_KEY
      - NOTIFICATION_API_URL=$_NOTIFICATION_API_URL

  - name: 'gcr.io/cloud-builders/docker'
    id: build-if-master
    entrypoint: 'bash'
    dir: frontend
    args:
    - '-c'
    - |
      if [[ "$BRANCH_NAME" == "master" ]]
      then
        docker build -t gcr.io/$PROJECT_ID/api:$BRANCH_NAME-$SHORT_SHA .
      else
        exit 0
      fi

  - name: 'gcr.io/cloud-builders/docker'
    id: push-if-master
    entrypoint: 'bash'
    args:
    - '-c'
    - |
      if [[ "$BRANCH_NAME" == "master" ]]
      then
        docker push gcr.io/$PROJECT_ID/api:$BRANCH_NAME-$SHORT_SHA
      else
        exit 0
      fi
