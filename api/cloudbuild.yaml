steps:
  # Passing POSTGRES_USER here creates a database of the same name
  - name: 'gcr.io/cloud-builders/docker'
    id: start_postgres
    entrypoint: /bin/sh
    args:
      [
        "-c",
        "docker run -d --network=cloudbuild -p=5432:5432 -e POSTGRES_USER=$_DB_NAME -e POSTGRES_PASSWORD=$_DB_PASS --name=postgres postgres:alpine",
      ]

  - name: mikewilliamson/wait-for
    id: wait
    args: ['postgres:5432']

  - name: 'gcr.io/track-compliance/ci'
    id: install
    dir: api
    entrypoint: pipenv
    args: ['sync', '-d', '--bare']
    env:
      - PIPENV_NOSPIN=TRUE

  - name: 'gcr.io/track-compliance/ci'
    id: dbInit
    dir: api
    entrypoint: pipenv
    args: ['run', 'db-upgrade']
    env:
      - DB_HOST=$_DB_HOST
      - DB_NAME=$_DB_NAME
      - DB_PASS=$_DB_PASS
      - DB_PORT=$_DB_PORT
      - DB_USER=$_DB_NAME

  - name: 'gcr.io/track-compliance/ci'
    id: dbInsert
    dir: api
    entrypoint: pipenv
    args: ['run', 'db-seed']
    env:
      - DB_HOST=$_DB_HOST
      - DB_NAME=$_DB_NAME
      - DB_PASS=$_DB_PASS
      - DB_PORT=$_DB_PORT
      - DB_USER=$_DB_NAME

  - name: 'gcr.io/track-compliance/ci'
    id: test
    dir: api
    entrypoint: pipenv
    args: ['run', 'test']
    env:
      - DB_HOST=$_DB_HOST
      - DB_NAME=$_DB_NAME
      - DB_PASS=$_DB_PASS
      - DB_PORT=$_DB_PORT
      - DB_USER=$_DB_NAME
      - AZURE_DB_HOST=$_AZURE_DB_HOST
      - AZURE_DB_NAME=$_AZURE_DB_NAME
      - AZURE_DB_PASS=$_AZURE_DB_PASS
      - AZURE_DB_USER=$_AZURE_DB_USER

  - name: 'gcr.io/cloud-builders/docker'
    id: build
    dir: api
    args: ['build', '-t','gcr.io/$PROJECT_ID/api:$BRANCH_NAME-$SHORT_SHA', '.']

images: ['gcr.io/$PROJECT_ID/api:$BRANCH_NAME-$SHORT_SHA']