import { Kind, GraphQLError, GraphQLScalarType } from 'graphql'

const validate = (value) => {
  if (typeof value !== typeof 'string') {
    throw new TypeError(`Value is not a string: ${typeof value}`)
  }

  const CVE_REGEX = /^CVE-\d{4}-\d{4,7}$/

  if (!CVE_REGEX.test(value)) {
    throw new TypeError(`Value is not a valid CVE ID: ${value}`)
  }

  return value
}

export const CveID = new GraphQLScalarType({
  name: 'CveID',
  description: 'String that conforms to a CVE ID structure.',
  serialize: validate,
  parseValue: validate,

  parseLiteral(ast) {
    if (ast.kind !== Kind.STRING) {
      throw new GraphQLError(`Can only validate strings as CVE IDs but got a: ${ast.kind}`)
    }
    return validate(ast.value)
  },
})

module.exports = {
  CveID,
}
