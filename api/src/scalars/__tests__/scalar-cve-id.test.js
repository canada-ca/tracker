import { CveID } from '../cve-id'
import { GraphQLError } from 'graphql'

describe('CveID Scalar', () => {
  test('valid CVE ID', () => {
    const validCveId = 'CVE-2021-12345'
    expect(CveID.serialize(validCveId)).toBe(validCveId)
    expect(CveID.parseValue(validCveId)).toBe(validCveId)
    expect(CveID.parseLiteral({ kind: 'StringValue', value: validCveId })).toBe(validCveId)
  })

  test('invalid CVE ID format', () => {
    const invalidCveId = 'INVALID-2021-12345'
    expect(() => CveID.serialize(invalidCveId)).toThrow(TypeError)
    expect(() => CveID.parseValue(invalidCveId)).toThrow(TypeError)
    expect(() => CveID.parseLiteral({ kind: 'StringValue', value: invalidCveId })).toThrow(TypeError)
  })

  test('non-string value', () => {
    const nonStringValue = 12345
    expect(() => CveID.serialize(nonStringValue)).toThrow(TypeError)
    expect(() => CveID.parseValue(nonStringValue)).toThrow(TypeError)
    expect(() => CveID.parseLiteral({ kind: 'IntValue', value: nonStringValue })).toThrow(GraphQLError)
  })

  test('valid CVE ID with different lengths', () => {
    const validCveIdShort = 'CVE-2021-1234'
    const validCveIdLong = 'CVE-2021-1234567'
    expect(CveID.serialize(validCveIdShort)).toBe(validCveIdShort)
    expect(CveID.parseValue(validCveIdShort)).toBe(validCveIdShort)
    expect(CveID.parseLiteral({ kind: 'StringValue', value: validCveIdShort })).toBe(validCveIdShort)

    expect(CveID.serialize(validCveIdLong)).toBe(validCveIdLong)
    expect(CveID.parseValue(validCveIdLong)).toBe(validCveIdLong)
    expect(CveID.parseLiteral({ kind: 'StringValue', value: validCveIdLong })).toBe(validCveIdLong)
  })
})
